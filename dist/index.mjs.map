{"version":3,"file":"index.mjs","sources":["../src/index.mjs"],"sourcesContent":["export default {\n    async fetch(request, env, ctx) {\n        try {\n            return await handleRequest(request, env, ctx);\n        } catch (e) {\n            console.log(e);\n            return new Response(e.message);\n        }\n    },\n    async scheduled(event, env) {\n        try {\n            return await handleSchedule(event, env);\n        } catch (e) {\n            console.log(e);\n            return new Response(e.message);\n        }\n    }\n};\n\nconst version = \"0.1.0\";\n//initial moving to KV later\nconst apikey = \"46b05bb8-8a5e-4f09-9ed3-5f58ff3bc972\";\n\nconst handleRequest = async (request, env, ctx) => {\n    let user;\n    const token = env.TelegramToken;\n    const address = new URL(request.url);\n    const elements = address.pathname.split(\"/\").filter(n => n);\n    let response;\n    if (elements[0] === undefined) {\n        response = new Response(\"welcome\", {\n            status: 200,\n            headers: {\n\n                \"Content-Type\": \"text/plain\",\n                \"X-Version\": version\n            }\n        });\n    } else if (elements[0] === \"telegram\" && request.method === \"POST\") {\n        let postData = await request.json();\n        const auth = request.headers.get(\"Cf-Webhook-Auth\")\n        if (!auth) {\n            return new Response(\"Bad Request\", {\n                status: 400,\n                headers: {\n                    \"X-Version\": version\n                }\n            });\n        } else {\n            if (apikey !== auth) {\n                return new Response(\"Unauthorized\", {\n                    status: 401,\n                    headers: {\n                        \"X-Version\": version\n                    }\n                });\n            }\n            user = +elements[0];\n            await sendTelegram(user, postData.text, token)\n            response = new Response(\"OK\", {\n                status: 200,\n                headers: {\n                    \"Content-Type\": \"text/plain\",\n                    \"X-Version\": version\n                }\n            });\n        }\n\n    } else if (elements[0] === undefined && request.method === \"GET\") {\n        response = new Response(`OK`, {\n            status: 200,\n            headers: {\n                \"Content-Type\": \"text/plain\",\n                \"X-Version\": version\n            }\n        });\n    } else {\n        response = new Response(\"Not Found\", {\n            status: 404,\n            headers: {\n                \"X-Version\": version\n            }\n        });\n    }\n\n    return response;\n};\n\nconst sendTelegram = async (users, message, token) => {\n    const send = async (user, message, token) => {\n        await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                chat_id: user,\n                text: message,\n            }),\n        });\n        return true;\n    };\n\n    if (Array.isArray(users)) {\n        for (let user of users) {\n            await send(user, message, token);\n        }\n    } else {\n        await send(users, message, token);\n    }\n    return true;\n};\n\nconst handleSchedule = async (controller, env, ctx) => {\n};"],"names":["async","request","env","ctx","handleRequest","e","console","log","Response","message","event","handleSchedule","user","token","TelegramToken","elements","URL","url","pathname","split","filter","n","response","undefined","status","headers","method","postData","json","auth","get","sendTelegram","text","users","send","fetch","body","JSON","stringify","chat_id","Array","isArray","controller"],"mappings":"AAAA,MAAe,CACXA,YAAYC,EAASC,EAAKC,GACtB,IACI,aAAaC,EAAcH,EAASC,EAAKC,GAC3C,MAAOE,GAEL,OADAC,QAAQC,IAAIF,GACL,IAAIG,SAASH,EAAEI,WAG9BT,gBAAgBU,EAAOR,GACnB,IACI,aAAaS,EAAeD,EAAOR,GACrC,MAAOG,GAEL,OADAC,QAAQC,IAAIF,GACL,IAAIG,SAASH,EAAEI,YAKlC,MAIML,EAAgBJ,MAAOC,EAASC,EAAKC,KACvC,IAAIS,EACJ,MAAMC,EAAQX,EAAIY,cAEZC,EADU,IAAIC,IAAIf,EAAQgB,KACPC,SAASC,MAAM,KAAKC,QAAOC,GAAKA,IACzD,IAAIC,EACJ,QAAoBC,IAAhBR,EAAS,GACTO,EAAW,IAAId,SAAS,UAAW,CAC/BgB,OAAQ,IACRC,QAAS,CAEL,eAAgB,aAChB,YAhBA,gBAmBL,GAAoB,aAAhBV,EAAS,IAAwC,SAAnBd,EAAQyB,OAAmB,CAChE,IAAIC,QAAiB1B,EAAQ2B,OAC7B,MAAMC,EAAO5B,EAAQwB,QAAQK,IAAI,mBACjC,IAAKD,EACD,OAAO,IAAIrB,SAAS,cAAe,CAC/BgB,OAAQ,IACRC,QAAS,CACL,YA1BJ,WA8BJ,GA5BG,yCA4BYI,EACX,OAAO,IAAIrB,SAAS,eAAgB,CAChCgB,OAAQ,IACRC,QAAS,CACL,YAlCR,WAsCJb,GAAQG,EAAS,SACXgB,EAAanB,EAAMe,EAASK,KAAMnB,GACxCS,EAAW,IAAId,SAAS,KAAM,CAC1BgB,OAAQ,IACRC,QAAS,CACL,eAAgB,aAChB,YA5CJ,gBAkDRH,OADuBC,IAAhBR,EAAS,IAAuC,QAAnBd,EAAQyB,OACjC,IAAIlB,SAAS,KAAM,CAC1BgB,OAAQ,IACRC,QAAS,CACL,eAAgB,aAChB,YAtDA,WA0DG,IAAIjB,SAAS,YAAa,CACjCgB,OAAQ,IACRC,QAAS,CACL,YA7DA,WAkEZ,OAAOH,GAGLS,EAAe/B,MAAOiC,EAAOxB,EAASI,KACxC,MAAMqB,EAAOlC,MAAOY,EAAMH,EAASI,WACzBsB,MAAM,+BAA+BtB,gBAAqB,CAC5Da,OAAQ,OACRD,QAAS,CACL,eAAgB,oBAEpBW,KAAMC,KAAKC,UAAU,CACjBC,QAAS3B,EACToB,KAAMvB,OAGP,GAGX,GAAI+B,MAAMC,QAAQR,GACd,IAAK,IAAIrB,KAAQqB,QACPC,EAAKtB,EAAMH,EAASI,cAGxBqB,EAAKD,EAAOxB,EAASI,GAE/B,OAAO,GAGLF,EAAiBX,MAAO0C,EAAYxC,EAAKC"}